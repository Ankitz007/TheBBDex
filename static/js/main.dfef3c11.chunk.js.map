{"version":3,"sources":["components/card/card.component.jsx","components/card_list/card_list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","character","img","name","occupation","nickname","status","CardList","characters","map","key","char_id","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","console","log","state","fetch","then","response","json","this","filteredCharacters","filter","toLowerCase","includes","id","class","href","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"yTAGaA,G,YAAO,SAACC,GAAD,OAChB,yBAAKC,UAAU,kBACX,yBAAKA,UAAU,QAAQC,IAAI,YAAYC,IAAKH,EAAMI,UAAUC,MAC5D,wBAAIJ,UAAU,kBAEdD,EAAMI,UAAUE,MAGhB,wBAAIL,UAAU,aAEdD,EAAMI,UAAUG,WAAW,IAG3B,wBAAIN,UAAU,aAAd,YAGA,KAAMD,EAAMI,UAAUI,UAGtB,wBAAIP,UAAU,aAAd,UAGA,KAAMD,EAAMI,UAAUK,WCrBjBC,G,MAAW,SAAAV,GAAK,OACzB,yBAAKC,UAAU,aAEXD,EAAMW,WAAWC,KAAI,SAAAR,GAAS,OAC5B,kBAAC,EAAD,CAAMS,IAAKT,EAAUU,QAASV,UAAWA,UCLtCW,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACvB,2BACAhB,UAAY,SACZiB,KAAK,SAASF,YAAaA,EAC3BG,SAAWF,MCyCEG,E,kDAxCb,aAAc,IAAD,8BACX,gBAWFH,aAAe,SAAAI,GACb,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,QAAQ,kBAAMC,QAAQC,IAAI,EAAKC,WAXpE,EAAKA,MAAQ,CACXjB,WAAY,GACZY,YAAa,IAJJ,E,gEAOO,IAAD,OACjBM,MAAM,iDACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAxB,GAAI,OAAI,EAAKgB,SAAS,CAACX,WAAYL,S,+BAKlC,MAI6B2B,KAAKL,MAAjCjB,EAJD,EAICA,WAAYY,EAJb,EAIaA,YACdW,EAAqBvB,EAAWwB,QAAQ,SAAA/B,GAAS,OACrDA,EAAUE,KAAK8B,cAAcC,SAASd,EAAYa,kBAEpD,OACE,yBAAKnC,UAAU,OACb,wBAAIqC,GAAG,QAAP,aACA,qEACA,kBAAC,EAAD,CACEtB,YAAc,mBACdC,aAAgBgB,KAAKhB,eAEvB,kBAAC,EAAD,CAAUN,WAAYuB,IACtB,yBAAKK,MAAM,UACX,uBAAGC,KAAK,SAAR,cADA,uB,GAlCUC,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,c","file":"static/js/main.dfef3c11.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css';\n\nexport const Card = (props) => (\n    <div className='card-container'>\n        <img className='image' alt='character' src={props.character.img}/>\n        <h2 className='card-comp-name'>\n        {\n        props.character.name\n        }\n        </h2>\n        <h3 className='card-comp'>\n        {\n        props.character.occupation[0]\n        }\n        </h3>\n        <h3 className='card-comp'>\n        Nickname:\n        {\n        '\\t'+ props.character.nickname\n        }\n        </h3>\n        <h3 className='card-comp'>\n        Status:\n        {\n        '\\t'+ props.character.status\n        }\n        </h3>\n    </div>\n)","import React from 'react';\nimport {Card} from '../card/card.component';\nimport './card_list.styles.css';\n\nexport const CardList = props => (\n    <div className='card-list'>\n    {\n        props.characters.map(character => (\n          <Card key={character.char_id} character={character}/>\n        ))\n    }\n    </div>\n);","import React from 'react';\nimport './search-box.styles.css';\n\nexport const SearchBox = ({ placeholder, handleChange }) => (\n  <input\n  className = \"search\"\n  type='search' placeholder={placeholder}\n  onChange={ handleChange }/>\n)\n","import React, { Component } from 'react';\nimport './App.css';\nimport { CardList } from './components/card_list/card_list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\n\n\nclass App extends Component{\n  // Can also be like class App extends React.Component\n  constructor(){\n    super();\n    this.state = {\n      characters: [],\n      searchField: ''\n    };\n  }\n  componentDidMount(){\n    fetch('https://www.breakingbadapi.com/api/characters')\n    .then(response => response.json())\n    .then(name => this.setState({characters: name}));\n    }\n  handleChange = e =>  {\n    this.setState({searchField: e.target.value}, () => console.log(this.state))\n  };\n  render() {\n    // const characters = this.state.characters;\n    // const searchField = this.state.searchField;\n    // Another way to write above to lines is :\n    const { characters, searchField } = this.state;\n    const filteredCharacters = characters.filter( character =>\n      character.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n    return(\n      <div className=\"App\">\n        <h1 id=\"head\">The BBDex</h1>\n        <h1>Search your favourite character here.</h1>\n        <SearchBox\n          placeholder = 'Search Character'\n          handleChange = {this.handleChange}\n         />\n        <CardList characters={filteredCharacters}/>\n        <div class='bottom'>\n        <a href=\"#head\">Click Here</a> to go to top.\n        </div>\n      </div>\n    );\n  }\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}